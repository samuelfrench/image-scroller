{"version":3,"sources":["components/ImageScroller.js","index.js"],"names":["ImageScroller","board","setBoard","useState","images","setImages","hasMore","setHasMore","currentPage","setCurrentPage","threadNumbers","setThreadNumbers","useEffect","async","response","fetch","concat","threads","json","error","console","fetchThreadNumbers","length","allImages","threadsToFetch","slice","threadNumber","threadResponse","threadImages","fetchInitialImages","_jsxs","className","children","_jsx","htmlFor","id","value","onChange","e","target","InfiniteScroll","dataLength","next","moreImages","loader","endMessage","map","url","index","src","encodeURIComponent","alt","onClick","navigator","share","title","log","handleShare","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"iNAsHeA,MAjHOA,KAClB,MAAOC,EAAOC,GAAYC,mBAAS,QAC5BC,EAAQC,GAAaF,mBAAS,KAC9BG,EAASC,GAAcJ,oBAAS,IAChCK,EAAaC,GAAkBN,mBAAS,IACxCO,EAAeC,GAAoBR,mBAAS,IAEnDS,qBAAU,KACqBC,WACvB,IACI,MAAMC,QAAiBC,MAAM,8CAADC,OAA+Cf,IACrEgB,QAAgBH,EAASI,OAC/BP,EAAiBM,GACjBR,EAAe,GACfJ,EAAU,IACVE,GAAW,EACf,CAAE,MAAOY,GACLC,QAAQD,MAAM,kCAAmCA,EACrD,GAGJE,EAAoB,GACrB,CAACpB,IAEJW,qBAAU,KACqBC,WACvB,GAAIH,EAAcY,OAAS,EACvB,IACI,IAAIC,EAAY,GAChB,MAAMC,EAAiBd,EAAce,MAAM,EAAG,GAC9C,IAAK,MAAMC,KAAgBF,EAAgB,CACvC,MAAMG,QAAuBZ,MAAM,sCAADC,OAAuCf,EAAK,YAAAe,OAAWU,IACnFE,QAAqBD,EAAeT,OAC1CK,EAAY,IAAIA,KAAcK,EAClC,CACAvB,EAAUkB,GACVd,EAAe,EACnB,CAAE,MAAOU,GACLC,QAAQD,MAAM,kCAAmCA,EACrD,CACJ,EAGJU,EAAoB,GACrB,CAACnB,EAAeT,IAsCnB,OACI6B,eAAA,OAAKC,UAAU,iBAAgBC,SAAA,CAC3BC,cAAA,MAAAD,SAAI,mBACJC,cAAA,SAAOC,QAAQ,iBAAgBF,SAAC,mBAChCF,eAAA,UAAQK,GAAG,iBAAiBC,MAAOnC,EAAOoC,SAAWC,GAAMpC,EAASoC,EAAEC,OAAOH,OAAOJ,SAAA,CAChFC,cAAA,UAAQG,MAAM,MAAKJ,SAAC,kCACpBC,cAAA,UAAQG,MAAM,IAAGJ,SAAC,iBAClBC,cAAA,UAAQG,MAAM,IAAGJ,SAAC,qBAClBC,cAAA,UAAQG,MAAM,IAAGJ,SAAC,yBAGtBC,cAACO,IAAc,CACXC,WAAYrC,EAAOkB,OACnBoB,KAjDU7B,UAClB,GAAkB,EAAdL,GAAmBE,EAAcY,OACjCf,GAAW,QAIf,IACI,IAAIoC,EAAa,GACjB,MAAMnB,EAAiBd,EAAce,MAAoB,EAAdjB,EAAqC,GAAnBA,EAAc,IAC3E,IAAK,MAAMkB,KAAgBF,EAAgB,CACvC,MAAMG,QAAuBZ,MAAM,sCAADC,OAAuCf,EAAK,YAAAe,OAAWU,IACnFE,QAAqBD,EAAeT,OAC1CyB,EAAa,IAAIA,KAAef,EACpC,CACAvB,EAAU,IAAID,KAAWuC,IACzBlC,EAAeD,EAAc,EACjC,CAAE,MAAOW,GACLC,QAAQD,MAAM,+BAAgCA,EAClD,GAgCQb,QAASA,EACTsC,OAAQX,cAAA,MAAAD,SAAI,eACZa,WAAYZ,cAAA,KAAAD,SAAG,mBAAmBA,SAElCC,cAAA,OAAKF,UAAU,SAAQC,SAClB5B,EAAO0C,KAAI,CAACC,EAAKC,IACdlB,eAAA,OAAiBC,UAAU,kBAAiBC,SAAA,CACxCC,cAAA,OAAiBgB,IAAG,mCAAAjC,OAAqCkC,mBAAmBH,IAAQI,IAAG,SAAAnC,OAAWgC,IAAxFA,GACVf,cAAA,UAAQmB,QAASA,IArCrBvC,WAChB,GAAIwC,UAAUC,MACV,UACUD,UAAUC,MAAM,CAClBC,MAAO,uBACPR,IAAKA,GAEb,CAAE,MAAO5B,GACLC,QAAQD,MAAM,iBAAkBA,EACpC,MAEAC,QAAQoC,IAAI,kDAChB,EAyB2CC,CAAYV,GAAKf,SAAC,YAFnCgB,WAOpB,EC9GdU,IAASC,OACP1B,cAAC2B,IAAMC,WAAU,CAAA7B,SACfC,cAACjC,EAAa,MAEhB8D,SAASC,eAAe,Q","file":"static/js/main.e9fbccdf.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"./ImageScroller.css\"; // Style for TikTok-like scroll\n\n// TODO: Test share button\nconst ImageScroller = () => {\n    const [board, setBoard] = useState('pol');\n    const [images, setImages] = useState([]);\n    const [hasMore, setHasMore] = useState(true);\n    const [currentPage, setCurrentPage] = useState(0);\n    const [threadNumbers, setThreadNumbers] = useState([]);\n\n    useEffect(() => {\n        const fetchThreadNumbers = async () => {\n            try {\n                const response = await fetch(`http://localhost:3001/thread-numbers?board=${board}`);\n                const threads = await response.json();\n                setThreadNumbers(threads);\n                setCurrentPage(0);\n                setImages([]);\n                setHasMore(true);\n            } catch (error) {\n                console.error(\"Failed to fetch thread numbers:\", error);\n            }\n        };\n\n        fetchThreadNumbers();\n    }, [board]);\n\n    useEffect(() => {\n        const fetchInitialImages = async () => {\n            if (threadNumbers.length > 0) {\n                try {\n                    let allImages = [];\n                    const threadsToFetch = threadNumbers.slice(0, 5);\n                    for (const threadNumber of threadsToFetch) {\n                        const threadResponse = await fetch(`http://localhost:3001/images?board=${board}&thread=${threadNumber}`);\n                        const threadImages = await threadResponse.json();\n                        allImages = [...allImages, ...threadImages];\n                    }\n                    setImages(allImages);\n                    setCurrentPage(1);\n                } catch (error) {\n                    console.error(\"Failed to fetch initial images:\", error);\n                }\n            }\n        };\n\n        fetchInitialImages();\n    }, [threadNumbers, board]);\n\n    const fetchMoreData = async () => {\n        if (currentPage * 5 >= threadNumbers.length) {\n            setHasMore(false);\n            return;\n        }\n\n        try {\n            let moreImages = [];\n            const threadsToFetch = threadNumbers.slice(currentPage * 5, (currentPage + 1) * 5);\n            for (const threadNumber of threadsToFetch) {\n                const threadResponse = await fetch(`http://localhost:3001/images?board=${board}&thread=${threadNumber}`);\n                const threadImages = await threadResponse.json();\n                moreImages = [...moreImages, ...threadImages];\n            }\n            setImages([...images, ...moreImages]);\n            setCurrentPage(currentPage + 1);\n        } catch (error) {\n            console.error(\"Failed to fetch more images:\", error);\n        }\n    };\n\n    const handleShare = async (url) => {\n        if (navigator.share) {\n            try {\n                await navigator.share({\n                    title: 'Check out this image',\n                    url: url\n                });\n            } catch (error) {\n                console.error(\"Error sharing:\", error);\n            }\n        } else {\n            console.log(\"Web Share API is not supported in your browser.\");\n        }\n    };\n\n    return (\n        <div className=\"image-scroller\">\n            <h1>Image Scroller</h1>\n            <label htmlFor=\"board-selector\">Select Board: </label>\n            <select id=\"board-selector\" value={board} onChange={(e) => setBoard(e.target.value)}>\n                <option value=\"pol\">/pol/ - Politically Incorrect</option>\n                <option value=\"b\">/b/ - Random</option>\n                <option value=\"g\">/g/ - Technology</option>\n                <option value=\"v\">/v/ - Video Games</option>\n                {/* Add more boards as needed */}\n            </select>\n            <InfiniteScroll\n                dataLength={images.length}\n                next={fetchMoreData}\n                hasMore={hasMore}\n                loader={<h4>Loading...</h4>}\n                endMessage={<p>No more images</p>}\n            >\n                <div className=\"images\">\n                    {images.map((url, index) => (\n                        <div key={index} className=\"image-container\">\n                            <img key={index} src={`http://localhost:3001/image?url=${encodeURIComponent(url)}`} alt={`Image ${index}`} />\n                            <button onClick={() => handleShare(url)}>Share</button>\n                        </div>\n                    ))}\n                </div>\n            </InfiniteScroll>\n        </div>\n    );\n};\n\nexport default ImageScroller;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ImageScroller from './components/ImageScroller';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ImageScroller />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}