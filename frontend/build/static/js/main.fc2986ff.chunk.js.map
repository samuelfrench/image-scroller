{"version":3,"sources":["components/ImageScroller.js","index.js"],"names":["ImageScroller","board","setBoard","useState","images","setImages","hasMore","setHasMore","currentPage","setCurrentPage","threadNumbers","setThreadNumbers","API_URL","process","useEffect","async","response","fetch","concat","threads","json","error","console","fetchThreadNumbers","length","allImages","threadsToFetch","slice","threadNumber","threadResponse","threadImages","fetchInitialImages","_jsxs","className","children","_jsx","htmlFor","id","value","onChange","e","target","InfiniteScroll","dataLength","next","moreImages","loader","endMessage","map","url","index","src","encodeURIComponent","alt","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"iNAqHeA,MAhHOA,KAClB,MAAOC,EAAOC,GAAYC,mBAAS,MAC5BC,EAAQC,GAAaF,mBAAS,KAC9BG,EAASC,GAAcJ,oBAAS,IAChCK,EAAaC,GAAkBN,mBAAS,IACxCO,EAAeC,GAAoBR,mBAAS,IAE7CS,EAAUC,mEAEhBC,qBAAU,KACqBC,WACvB,IACI,MAAMC,QAAiBC,MAAM,GAADC,OAAIN,EAAO,0BAAAM,OAAyBjB,IAC1DkB,QAAgBH,EAASI,OAC/BT,EAAiBQ,GACjBV,EAAe,GACfJ,EAAU,IACVE,GAAW,EACf,CAAE,MAAOc,GACLC,QAAQD,MAAM,kCAAmCA,EACrD,GAGJE,EAAoB,GACrB,CAACtB,EAAOW,IAEXE,qBAAU,KACqBC,WACvB,GAAIL,EAAcc,OAAS,EACvB,IACI,IAAIC,EAAY,GAChB,MAAMC,EAAiBhB,EAAciB,MAAM,EAAG,GAC9C,IAAK,MAAMC,KAAgBF,EAAgB,CACvC,MAAMG,QAAuBZ,MAAM,GAADC,OAAIN,EAAO,kBAAAM,OAAiBjB,EAAK,YAAAiB,OAAWU,IACxEE,QAAqBD,EAAeT,OAC1CK,EAAY,IAAIA,KAAcK,EAClC,CACAzB,EAAUoB,GACVhB,EAAe,EACnB,CAAE,MAAOY,GACLC,QAAQD,MAAM,kCAAmCA,EACrD,CACJ,EAGJU,EAAoB,GACrB,CAACrB,EAAeT,EAAOW,IAsC1B,OACIoB,eAAA,OAAKC,UAAU,iBAAgBC,SAAA,CAC3BC,cAAA,MAAAD,SAAI,mBACJC,cAAA,SAAOC,QAAQ,iBAAgBF,SAAC,mBAChCF,eAAA,UAAQK,GAAG,iBAAiBC,MAAOrC,EAAOsC,SAAWC,GAAMtC,EAASsC,EAAEC,OAAOH,OAAOJ,SAAA,CAChFC,cAAA,UAAQG,MAAM,IAAGJ,SAAC,qBAClBC,cAAA,UAAQG,MAAM,IAAGJ,SAAC,yBAGtBC,cAACO,IAAc,CACXC,WAAYvC,EAAOoB,OACnBoB,KA/CU7B,UAClB,GAAkB,EAAdP,GAAmBE,EAAcc,OACjCjB,GAAW,QAIf,IACI,IAAIsC,EAAa,GACjB,MAAMnB,EAAiBhB,EAAciB,MAAoB,EAAdnB,EAAqC,GAAnBA,EAAc,IAC3E,IAAK,MAAMoB,KAAgBF,EAAgB,CACvC,MAAMG,QAAuBZ,MAAM,GAADC,OAAIN,EAAO,kBAAAM,OAAiBjB,EAAK,YAAAiB,OAAWU,IACxEE,QAAqBD,EAAeT,OAC1CyB,EAAa,IAAIA,KAAef,EACpC,CACAzB,EAAU,IAAID,KAAWyC,IACzBpC,EAAeD,EAAc,EACjC,CAAE,MAAOa,GACLC,QAAQD,MAAM,+BAAgCA,EAClD,GA8BQf,QAASA,EACTwC,OAAQX,cAAA,MAAAD,SAAI,eACZa,WAAYZ,cAAA,KAAAD,SAAG,mBAAmBA,SAElCC,cAAA,OAAKF,UAAU,SAAQC,SAClB9B,EAAO4C,KAAI,CAACC,EAAKC,IACdf,cAAA,OAAiBF,UAAU,kBAAiBC,SACxCC,cAAA,OAAKgB,IAAG,GAAAjC,OAAKN,EAAO,eAAAM,OAAckC,mBAAmBH,IAAQI,IAAG,SAAAnC,OAAWgC,MADrEA,WAMpB,EC7GdI,IAASC,OACPpB,cAACqB,IAAMC,WAAU,CAAAvB,SACfC,cAACnC,EAAa,MAEhB0D,SAASC,eAAe,Q","file":"static/js/main.fc2986ff.chunk.js","sourcesContent":["// filepath: /home/sam/4chan-image-scroller/frontend/src/components/ImageScroller.js\nimport React, { useEffect, useState } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"./ImageScroller.css\"; // Style for TikTok-like scroll\n\nconst ImageScroller = () => {\n    const [board, setBoard] = useState('g');\n    const [images, setImages] = useState([]);\n    const [hasMore, setHasMore] = useState(true);\n    const [currentPage, setCurrentPage] = useState(0);\n    const [threadNumbers, setThreadNumbers] = useState([]);\n\n    const API_URL = process.env.REACT_APP_API_URL;\n\n    useEffect(() => {\n        const fetchThreadNumbers = async () => {\n            try {\n                const response = await fetch(`${API_URL}/thread-numbers?board=${board}`);\n                const threads = await response.json();\n                setThreadNumbers(threads);\n                setCurrentPage(0);\n                setImages([]);\n                setHasMore(true);\n            } catch (error) {\n                console.error(\"Failed to fetch thread numbers:\", error);\n            }\n        };\n\n        fetchThreadNumbers();\n    }, [board, API_URL]);\n\n    useEffect(() => {\n        const fetchInitialImages = async () => {\n            if (threadNumbers.length > 0) {\n                try {\n                    let allImages = [];\n                    const threadsToFetch = threadNumbers.slice(0, 5);\n                    for (const threadNumber of threadsToFetch) {\n                        const threadResponse = await fetch(`${API_URL}/images?board=${board}&thread=${threadNumber}`);\n                        const threadImages = await threadResponse.json();\n                        allImages = [...allImages, ...threadImages];\n                    }\n                    setImages(allImages);\n                    setCurrentPage(1);\n                } catch (error) {\n                    console.error(\"Failed to fetch initial images:\", error);\n                }\n            }\n        };\n\n        fetchInitialImages();\n    }, [threadNumbers, board, API_URL]);\n\n    const fetchMoreData = async () => {\n        if (currentPage * 5 >= threadNumbers.length) {\n            setHasMore(false);\n            return;\n        }\n\n        try {\n            let moreImages = [];\n            const threadsToFetch = threadNumbers.slice(currentPage * 5, (currentPage + 1) * 5);\n            for (const threadNumber of threadsToFetch) {\n                const threadResponse = await fetch(`${API_URL}/images?board=${board}&thread=${threadNumber}`);\n                const threadImages = await threadResponse.json();\n                moreImages = [...moreImages, ...threadImages];\n            }\n            setImages([...images, ...moreImages]);\n            setCurrentPage(currentPage + 1);\n        } catch (error) {\n            console.error(\"Failed to fetch more images:\", error);\n        }\n    };\n\n    const handleShare = async (url) => {\n        if (navigator.share) {\n            try {\n                await navigator.share({\n                    title: 'Check out this image',\n                    url: url\n                });\n            } catch (error) {\n                console.error(\"Error sharing:\", error);\n            }\n        } else {\n            console.log(\"Web Share API is not supported in your browser.\");\n        }\n    };\n\n    return (\n        <div className=\"image-scroller\">\n            <h1>Image Scroller</h1>\n            <label htmlFor=\"board-selector\">Select Board: </label>\n            <select id=\"board-selector\" value={board} onChange={(e) => setBoard(e.target.value)}>\n                <option value=\"g\">/g/ - Technology</option>\n                <option value=\"v\">/v/ - Video Games</option>\n                {/* Add more boards as needed */}\n            </select>\n            <InfiniteScroll\n                dataLength={images.length}\n                next={fetchMoreData}\n                hasMore={hasMore}\n                loader={<h4>Loading...</h4>}\n                endMessage={<p>No more images</p>}\n            >\n                <div className=\"images\">\n                    {images.map((url, index) => (\n                        <div key={index} className=\"image-container\">\n                            <img src={`${API_URL}/image?url=${encodeURIComponent(url)}`} alt={`Image ${index}`} />\n                        </div>\n                    ))}\n                </div>\n            </InfiniteScroll>\n        </div>\n    );\n};\n\nexport default ImageScroller;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ImageScroller from './components/ImageScroller';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ImageScroller />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}